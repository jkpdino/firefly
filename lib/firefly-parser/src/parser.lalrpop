use firefly_ast::{
    Visibility,
    Path, PathSegment,
    ty::Ty,
    value::{Value, IfStatement, ElseStatement, WhileStatement},
    stmt::{Stmt, CodeBlock},
    func::{Func, FuncParam},
    item::Item,
    struct_def::{StructDef, Field},
    module::Module,
    import::{Import, ImportSymbolList, ImportSymbol},
    operator::{PrefixOperator, InfixOperator}
};
use crate::{
    error::{LexerError, ParserErrorEnv, Expecting},
    lexer::Token,
};
use firefly_span::{
    BytePos,
    Span,
    Spanned
};

grammar<'source, 'env>(
    errors: &'env ParserErrorEnv<'source>
);

extern {
    type Location = BytePos;
    type Error = (LexerError, Span);
    enum Token<'source> {
        "ident" => Token::Ident(<&'source str>),

        "public" => Token::PublicKw,
        "internal" => Token::InternalKw,
        "fileprivate" => Token::FilePrivateKw,
        "private" => Token::PrivateKw,

        "static" => Token::StaticKw,

        "module" => Token::ModuleKw,
        "import" => Token::ImportKw,

        "as" => Token::AsKw,

        "var" => Token::VarKw,
        "struct" => Token::StructKw,
        "func" => Token::FuncKw,

        "static" => Token::StaticKw,

        "return" => Token::ReturnKw,
        "break" => Token::BreakKw,
        "continue" => Token::ContinueKw,

        "if" => Token::IfKw,
        "else" => Token::ElseKw,
        "while" => Token::WhileKw,

        "integer" => Token::IntegerLiteral(<&'source str>),
        "float" => Token::FloatLiteral(<&'source str>),
        "string" => Token::StringLiteral(<&'source str>),
        "long_string" => Token::LongStringLiteral(<&'source str>),

        // Symbols
        "(" => Token::OpenParen,
        ")" => Token::CloseParen,
        "{" => Token::OpenBrace,
        "}" => Token::CloseBrace,

        "." => Token::Period,
        "," => Token::Comma,
        ";" => Token::Semicolon,
        ":" => Token::Colon,
        "->" => Token::Arrow,

        "=" => Token::Equals,

        "!" => Token::Invert,
        "+" => Token::Plus,
        "-" => Token::Minus,
        "<<" => Token::ShiftLeft,
        ">>" => Token::ShiftRight,

        "*" => Token::Multiply,
        "/" => Token::Divide,
        "%" => Token::Modulo,
        "&" => Token::BitAnd,
        "|" => Token::BitOr,
        "^" => Token::BitXor,

        "<" => Token::LessThan,
        ">" => Token::GreaterThan,
        "<=" => Token::LessThanOrEqual,
        ">=" => Token::GreaterThanOrEqual,
        "==" => Token::EqualEqual,
        "!=" => Token::NotEquals,

        "&&" => Token::LogicalAnd,
        "||" => Token::LogicalOr,

        "+=" => Token::PlusEquals,
        "-=" => Token::MinusEquals,
        "*=" => Token::MultiplyEquals,
        "/=" => Token::DivideEquals,
        "%=" => Token::ModuloEquals,
        "&=" => Token::BitAndEquals,
        "|=" => Token::BitOrEquals,
        "^=" => Token::BitXorEquals,
        "<<=" => Token::ShiftLeftEquals,
        ">>=" => Token::ShiftRightEquals,

        "whitespace" => Token::Whitespace,
    }
}

pub Top = { Item* }

Item: Item = {
    <Struct> => Item::StructDef(<>),
    <Function> => Item::Func(<>),
    <Field> => Item::Field(<>),
    <Module> => Item::Module(<>),
    <Import> => Item::Import(<>),

    ExpectItem => Item::Error
}

// Modules
Module = { Spanned<UnspannedModule> }
UnspannedModule: Module = {
    "module" <path: Path> ";"? => Module {
        path
    },
}

// Imports
Import = { Spanned<UnspannedImport> };
UnspannedImport: Import = {
    "import" <module: Path> <alias: Rename?> <symbol_list: ImportSymbolList?> ";"? => Import::new(
        module,
        alias,
        symbol_list
    ),
}

ImportSymbolList: ImportSymbolList = {
    "(" <symbols: CommaList<ImportSymbol>> ")" => ImportSymbolList { symbols }
}

ImportSymbol: ImportSymbol = {
    <name: Name> <alias: Rename?> => ImportSymbol { name, alias }
}

Rename: Spanned<String> = {
    "as" <name: Name> => name
}

// Structs

Field = { Spanned<UnspannedField> }
UnspannedField: Field = {
    <visibility: Visibility?> <static_kw: StaticKw?> "var" <name: Name> ":" <ty: Type> <default: EqualsValue?> ";"? => Field::new(
        visibility,
        static_kw,
        name,
        ty,
        default,
    )
}

Struct = { Spanned<UnspannedStruct> }
UnspannedStruct: StructDef = {
    <visibility: Visibility?> "struct" <name: Name> "{" <items: Item*> "}" => StructDef::new(
        visibility,
        name,
        items,
    )
}

EqualsValue: Spanned<Value> = {
    "=" <value: Value> => value
}

// Function
FuncParam: Spanned<FuncParam> = {
    <l: @L> <name: Name> ":" <ty: Type> <r: @R> => Spanned::new(FuncParam::new(name, ty), Span::new(l, r))
}

Function = { Spanned<UnspannedFunction> }
UnspannedFunction: Func = {
    <visibility: Visibility?> <static_kw: StaticKw?> "func" <name: Name> "(" <params: CommaList<FuncParam>> ")" <return_ty:ReturnType?> <body: CodeBlock> => Func::new(
        visibility,
        static_kw,
        name,
        params,
        return_ty,
        body,
    )
}

ReturnType: Spanned<Ty> = {
    "->" <return_ty:Type> => return_ty,
}

// Statements
BindStmt: Stmt = {
    "var" <name: Name> ":" <ty: Type> "=" <value: Value> ";" => Stmt::Bind(name, ty, value)
}

Stmt = { Spanned<UnspannedStmt> }
UnspannedStmt: Stmt = {
    BindStmt => <>,
    Spanned<StatementLikeValue> => Stmt::Value(<>, false),
    <value: NonStatementLikeValue> ";" => Stmt::Value(value, true),
    ";" => Stmt::Semicolon,
}

StmtList: Vec<Spanned<Stmt>> = {
    <stmt: Stmt> => vec![stmt],
    <mut original: StmtList> <new: Stmt> => {
        original.push(new);
        original
    }
}

CodeBlock: CodeBlock = {
    "{" <inner: CodeBlockInner> "}" => inner
}

CodeBlockInner: CodeBlock = {
    <stmts: StmtList> <term: NonStatementLikeValue> => CodeBlock::new(stmts, Some(term)),
    <stmts: StmtList> => CodeBlock::new(stmts, None),
    NonStatementLikeValue => CodeBlock::new(vec![], Some(<>)),
    () => CodeBlock::new(vec![], None)
}

// Values
Value = { Spanned<RestrictedValue<"L">> }
NonStatementLikeValue = { Spanned<RestrictedValue<"">> }

RestrictedValue<L>: Value = {
    InfixValue<L> => <>,
    "return" <value: Value?> => Value::Return(value.map(Box::new))
}

InfixValue<L>: Value = {
    PrefixedValue<L> => <>,
    <lhs: Spanned<InfixValue<L>>> <op: InfixOperator> <rhs: Spanned<PrefixedValue<L>>> => Value::Infix(Box::new(lhs), op, Box::new(rhs)),
}

PrefixedValue<L>: Value = {
    SuffixedValue<L> => <>,
    <op: PrefixOperator> <rhs: Spanned<PrefixedValue<L>>> => Value::Prefix(op, Box::new(rhs)),
}

SuffixedValue<L>: Value = {
    AtomValue<L> => <>,
    <func: Spanned<SuffixedValue<L>>> "(" <args: CommaList<Value>> ")" => Value::Call(Box::new(func), args),
    <parent: Spanned<SuffixedValue<L>>> "." <member: PathSegment> => Value::member(Box::new(parent), member),
    <parent: Spanned<SuffixedValue<L>>> "." <index: Spanned<Number>> => Value::TupleMember(Box::new(parent), index),
}

Number: String = {
    "integer" => <>.into()
}

AtomValue<L>: Value = {
    LiteralValue => <>,
    "(" <items: CommaList<Value>> ")" => Value::Tuple(items),
    SinglePath => Value::Path(<>),

    StatementLikeValue if L != "" => <>,

    "break" <label: Name?> => Value::Break(label),
    "continue" <label: Name?> => Value::Continue(label),
}

StatementLikeValue: Value = {
    IfStatement => Value::If(Box::new(<>)),
    WhileStatement => Value::While(Box::new(<>)),
}

LiteralValue: Value = {
    Spanned<"integer"> => Value::IntegerLiteral(Spanned::new(<>.item.into(), <>.span)),
    Spanned<"float"> => Value::FloatLiteral(Spanned::new(<>.item.into(), <>.span)),
    Spanned<"string"> => Value::StringLiteral(Spanned::new(<>.item.into(), <>.span)),
    Spanned<"long_string"> => Value::StringLiteral(Spanned::new(<>.item.into(), <>.span)),
}

IfStatement: IfStatement = {
    "if" <condition: Value> <positive: CodeBlock> <negative: ElseStatement?> => IfStatement {
        condition,
        positive,
        negative,
    }
}

PrefixOperator: PrefixOperator = {
    "!" => PrefixOperator::Invert,
    "+" => PrefixOperator::Identity,
    "-" => PrefixOperator::Negate
}

InfixOperator: InfixOperator = {
    "+" => InfixOperator::Add,
    "-" => InfixOperator::Subtract,

    "*" => InfixOperator::Multiply,
    "/" => InfixOperator::Divide,
    "%" => InfixOperator::Modulo,

    "<<" => InfixOperator::ShiftLeft,
    ">>" => InfixOperator::ShiftRight,
    
    "&" => InfixOperator::BitAnd,
    "|" => InfixOperator::BitOr,
    "^" => InfixOperator::BitXor,

    "<" => InfixOperator::CompareLessThan,
    ">" => InfixOperator::CompareGreaterThan,
    "<=" => InfixOperator::CompareLessThanOrEqual,
    ">=" => InfixOperator::CompareGreaterThanOrEqual,
    "==" => InfixOperator::CompareEqual,
    "!=" => InfixOperator::CompareNotEqual,

    "&&" => InfixOperator::LogicalAnd,
    "||" => InfixOperator::LogicalOr,

    "+=" => InfixOperator::AddAssign,
    "-=" => InfixOperator::SubtractAssign,
    "*=" => InfixOperator::MultiplyAssign,
    "/=" => InfixOperator::DivideAssign,
    "%=" => InfixOperator::ModuloAssign,

    "<<=" => InfixOperator::ShiftLeftAssign,
    ">>=" => InfixOperator::ShiftRightAssign,

    "&=" => InfixOperator::BitAndAssign,
    "|=" => InfixOperator::BitOrAssign,
    "^=" => InfixOperator::BitXorAssign,

    "=" => InfixOperator::Assign,
}

WhileStatement: WhileStatement = {
    "while" <condition: Value> <body: CodeBlock> => WhileStatement {
        label: None,
        condition,
        body
    },
    <label: Name> ":" "while" <condition: Value> <body: CodeBlock> => WhileStatement {
        label: Some(label),
        condition,
        body
    }
}

ElseStatement: ElseStatement = {
    "else" <negative: CodeBlock> => ElseStatement::Else(negative),
    "else" <negative: IfStatement> => ElseStatement::ElseIf(Box::new(negative)),
}

// Types
Type = { Spanned<UnspannedType> }
UnspannedType: Ty = {
    "(" <items: CommaList<Type>> ")" => Ty::Tuple(items),
    <Path> => Ty::Path(<>),

    ExpectType => Ty::Error,
}


// Common
Path: Path = {
    <s: Spanned<PathSegments>> => Path::new(s.item, s.span)
}

SinglePath: Path = {
    <s: Spanned<PathSegment>> => Path::new(vec![s.item], s.span)
}

PathSegments: Vec<PathSegment> = {
    <first: PathSegment> <later: LaterSegment*> => [&[first][..], &later[..]].concat()
}

LaterSegment: PathSegment = {
    "." <later: PathSegment> => later,
}

PathSegment: PathSegment = {
    <i: Name> => PathSegment::new(i)
}

Visibility = { Spanned<UnspannedVisibility> }
UnspannedVisibility: Visibility = {
    "public" => Visibility::Public,
    "internal" => Visibility::Internal,
    "fileprivate" => Visibility::FilePrivate,
    "private" => Visibility::Private
}

// Util
Spanned<T>: Spanned<T> = {
    <l: @L> <t: T> <r: @R> => Spanned::new(t, Span::new(l, r))
}

#[inline]
CommaList<T>: Vec<T> = {
    <mut v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            v.push(e);
            v
        }
    }
}

Name: Spanned<String> = {
    Spanned<"ident"> => Spanned::new(<>.item.into(), <>.span)
}

// Keywords
StaticKw: Span = {
    Spanned<"static"> => <>.span
}


// Error Handling

#[inline]
Recover: () = {
    ! => {
        errors.emit(<>.error, None);
    }
}

#[inline]
ExpectItem: () = {
    ! => {
        errors.emit(<>.error, Some(Expecting::Item));
    }
}

#[inline]
ExpectType: () = {
    ! => {
        errors.emit(<>.error, Some(Expecting::Type));
    }
}

#[inline]
ExpectValue: () = {
    ! => {
        errors.emit(<>.error, Some(Expecting::Value));
    }
}

#[inline]
ExpectStmt: () = {
    ! => {
        errors.emit(<>.error, Some(Expecting::Stmt));
    }
}

#[inline]
ExpectPath: () = {
    ! => {
        errors.emit(<>.error, Some(Expecting::Path));
    }
}